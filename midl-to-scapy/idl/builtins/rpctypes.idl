// This is from [MS-RPCE] and [C706] Appendix N

import "../win/ms-dtyp.idl";

// [MS-RPCE] 2.2.1.1.1

typedef struct {
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;

typedef unsigned int error_status;

typedef [range(0,50)] unsigned long StatisticsCount;

// Appendix N.1

typedef unsigned char unsigned8;
typedef unsigned short unsigned16;
typedef unsigned long unsigned32;
typedef char signed8;
typedef short signed16;
typedef long signed32;

typedef unsigned32 boolean32; /* 32-bit wide boolean */

typedef unsigned long error_status_t;
const long error_status_ok = 0;

typedef struct {
    unsigned32 time_low;
    unsigned16 time_mid;
    unsigned16 time_hi_and_version;
    unsigned8 clock_seq_hi_and_reserved;
    unsigned8 clock_seq_low;
    byte node[6];
} uuid_t, *uuid_p_t;

const long ndr_c_int_big_endian = 0;
const long ndr_c_int_little_endian = 1;
const long ndr_c_float_ieee = 0;
const long ndr_c_float_vax = 1;
const long ndr_c_float_cray = 2;
const long ndr_c_float_ibm = 3;
const long ndr_c_char_ascii = 0;
const long ndr_c_char_ebcdic = 1;
typedef struct
{
    unsigned8 int_rep;
    unsigned8 char_rep;
    unsigned8 float_rep;
    byte reserved;
} ndr_format_t, *ndr_format_p_t;

typedef struct ndr_context_handle
{
    unsigned32 context_handle_attributes;
    uuid_t context_handle_uuid;
} ndr_context_handle;

typedef byte ISO_LATIN_1;
typedef struct
{
    byte row;
    byte column;
} ISO_MULTI_LINGUAL;
typedef struct
{
    byte group;
    byte plane;
    byte row;
    byte column;
} ISO_UCS;

const long dce_c_rpc_authn_protocol_none = 0;
const long dce_c_rpc_authn_protocol_krb5 = 1;
typedef unsigned8 dce_rpc_authn_protocol_id_t;

// Appendix N.2

/* unable to get response from server: */
const long nca_s_comm_failure = 0x1C010001;
/* bad operation number in call: */
const long nca_s_op_rng_error = 0x1C010002;
/* unknown interface: */
const long nca_s_unk_if = 0x1C010003;
/* client passed server wrong server boot time: */
const long nca_s_wrong_boot_time = 0x1C010006;
/* a restarted server called back a client: */
const long nca_s_you_crashed = 0x1C010009;
/* someone messed up the protocol: */
const long nca_s_proto_error = 0x1C01000B;
/* output args too big: */
const long nca_s_out_args_too_big = 0x1C010013;
/* server is too busy to handle call: */
const long nca_s_server_too_busy = 0x1C010014;
/* string argument longer than declared max len: */
const long nca_s_fault_string_too_long = 0x1C010015;
/* no implementation of generic operation for object: */
const long nca_s_unsupported_type = 0x1C010017;
const long nca_s_fault_int_div_by_zero = 0x1C000001;
const long nca_s_fault_addr_error = 0x1C000002;
const long nca_s_fault_fp_div_zero = 0x1C000003;
const long nca_s_fault_fp_underflow = 0x1C000004;
const long nca_s_fault_fp_overflow = 0x1C000005;
const long nca_s_fault_invalid_tag = 0x1C000006;
const long nca_s_fault_invalid_bound = 0x1C000007;
const long nca_s_rpc_version_mismatch = 0x1C000008;
/* call rejected, but no more detail: */
const long nca_s_unspec_reject = 0x1C000009;
const long nca_s_bad_actid = 0x1C00000A;
const long nca_s_who_are_you_failed = 0x1C00000B;
const long nca_s_manager_not_entered = 0x1C00000C;
const long nca_s_fault_cancel = 0x1C00000D;
const long nca_s_fault_ill_inst = 0x1C00000E;
const long nca_s_fault_fp_error = 0x1C00000F;
const long nca_s_fault_int_overflow = 0x1C000010;
/* unused: 0x1C000011; */
const long nca_s_fault_unspec = 0x1C000012;
const long nca_s_fault_remote_comm_failure = 0x1C000013;
const long nca_s_fault_pipe_empty = 0x1C000014;
const long nca_s_fault_pipe_closed = 0x1C000015;
const long nca_s_fault_pipe_order = 0x1C000016;
const long nca_s_fault_pipe_discipline = 0x1C000017;
const long nca_s_fault_pipe_comm_error = 0x1C000018;
const long nca_s_fault_pipe_memory = 0x1C000019;
const long nca_s_fault_context_mismatch = 0x1C00001A;
const long nca_s_fault_remote_no_memory = 0x1C00001B;
const long nca_s_invalid_pres_context_id = 0x1C00001C;
const long nca_s_unsupported_authn_level = 0x1C00001D;
const long nca_s_invalid_checksum = 0x1C00001F;
const long nca_s_invalid_crc = 0x1C000020;
const long nca_s_fault_user_defined = 0x1C000021;
const long nca_s_fault_tx_open_failed = 0x1C000022;
const long nca_s_fault_codeset_conv_error = 0x1C000023;
const long nca_s_fault_object_not_found = 0x1C000024;
const long nca_s_fault_no_client_stub = 0x1C000025;

// Appendix N.3

typedef struct {
    unsigned long Count;
    [size_is(Count)] RPC_IF_ID* IfId[];
} rpc_if_id_vector_t,
*rpc_if_id_vector_p_t;

const long rpc_c_vers_all = 1;
const long rpc_c_vers_compatible = 2;
const long rpc_c_vers_exact = 3;
const long rpc_c_vers_major_only = 4;
const long rpc_c_vers_upto = 5;

const long rpc_c_stats_calls_in = 0;
const long rpc_c_stats_calls_out = 1;
const long rpc_c_stats_pkts_in = 2;
const long rpc_c_stats_pkts_out = 3;
const long rpc_c_stats_array_max_size = 4;

typedef struct {
    unsigned32 count;
    unsigned32 stats[1]; /* length_is (count) */
} rpc_stats_vector_t, *rpc_stats_vector_p_t;

const long rpc_c_ep_all_elts = 0;
const long rpc_c_ep_match_by_if = 1;
const long rpc_c_ep_match_by_obj = 2;
const long rpc_c_ep_match_by_both = 3;