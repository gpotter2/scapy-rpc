import re
import sys
import os
from midl_resolve import *

PUBLISH = False

try:
    import black
except ImportError:
    print("BLACK IS REQUIRED TO RUN midl_to_scapy !", file=sys.stderr)
    print("pip install black", file=sys.stderr)
    sys.exit(1)


BASE = """
%s
import uuid

%s
from scapy.layers.dcerpc import (
    NDRPacket,
    %s
)
"""


def get_base(out):
    fields = ",\n".join(
        x
        for x in sorted(
            [
                "PacketListField",
                "StrFixedLenFieldUtf16",
                "StrFixedLenField",
            ]
        )
        if re.search("(?<!Conf)%s\\(" % x, out)
    )
    return BASE % (
        ("from enum import IntEnum" if "IntEnum" in out else ""),
        ("from scapy.fields import (%s)" % fields) if fields else "",
        ",\n".join(
            x
            for x in sorted(
                set(
                    [
                        # Bare minimum
                        "register_com_interface",
                        "register_dcerpc_interface",
                        "DceRpcOp",
                        # Arrays
                        "NDRVarPacketListField",
                        "NDRConfPacketListField",
                        "NDRConfVarPacketListField",
                        "NDRFieldListField",
                        "NDRConfFieldListField",
                        "NDRConfVarFieldListField",
                        # (yes those 2 don't count as strings)
                        "NDRConfStrLenField",
                        "NDRConfStrLenFieldUtf16",
                        # Strings
                        "NDRConfStrLenField",
                        "NDRConfStrLenFieldUtf16",
                        "NDRVarStrLenField",
                        "NDRVarStrLenFieldUtf16",
                        "NDRConfVarStrLenField",
                        "NDRConfVarStrLenFieldUtf16",
                        "NDRConfVarStrNullField",
                        "NDRConfVarStrNullFieldUtf16",
                        # Union
                        "NDRUnionField",
                        # Misc
                        "NDRPacketField",
                        "NDRRefPointerField",
                        "NDRRefEmbPointerField",
                        "NDRFullPointerField",
                        "NDRRecursiveField",
                        "NDRContextHandle",
                        # Enums
                        "NDRIntEnumField",
                        "NDRInt3264EnumField",
                    ]
                    + list(SCAPY_FIELDS.values())
                )
            )
            if x in out
        ),
    )


HEADER = '''
"""
RPC definitions for the following interfaces:
- %s
%s"""
'''


def get_header(env):
    return HEADER % (
        "\n- ".join(
            "%s (v%s): %s" % (x.name, x.version, x.uuid)
            for x in env
            if isinstance(x, ScapyInterfaceDefinition)
        ),
        (
            "This file is auto-generated by midl-to-scapy, do not modify.\n" if not PUBLISH else ""
        )
    )


# --- Main


def main(fname):
    if not PUBLISH:
        print("### %s" % os.path.basename(fname))
    # Parse & build AST
    c = Compiler()
    f = c.process_file(fname)
    # Convert into Scapy code
    d = Resolver(f)
    d.resolve_file(fname)
    # Output
    HEADER = get_header(d.environment)
    OUTPUT = "\n".join(x.to_string() for x in d.environment)
    OUTPUT = HEADER + get_base(OUTPUT) + OUTPUT
    # Lint (no formatting is done during output)
    try:
        OUTPUT = black.format_str(OUTPUT, mode=black.Mode())
    except Exception as e:
        print(str(e), file=sys.stderr)
        pass
    print(OUTPUT, end="")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Wrong usage.\n python midl_to_scapy.py [files]")
        sys.exit(1)
    else:
        for fname in sys.argv[1:]:
            main(fname)
